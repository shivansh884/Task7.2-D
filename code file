import speech_recognition as sr # provides access to the Google Web Speech API
from gpiozero import LED        #  library to control the GPIO pins
from time import sleep          #  Adds delays in the program

# Initialize LED on GPIO pin 17
led = LED(17)

# Initialize recognizer for speech recognition
recognizer = sr.Recognizer()

# Function to listen for voice commands
def listen_for_command():
    # Using the default microphone as the audio source
    with sr.Microphone() as source:
        print("Listening for command...")
        
        # Capture the audio from the microphone
        audio = recognizer.listen(source)
        
        try:
            # Try to recognize the captured audio using Google Web Speech API
            # Convert the recognized command to lowercase for easier comparison
            command = recognizer.recognize_google(audio).lower()
            print(f"You said: {command}")
            return command
        except sr.UnknownValueError:
            # Handle the error if the speech was unintelligible
            print("Sorry, I did not understand that.")
        except sr.RequestError:
            # Handle API errors, such as network issues
            print("Request failed; check your internet connection.")
        
        # Return an empty string if no command is recognized
        return ""

# Function to control the light based on the voice command
def control_light(command):
    # If the command contains the phrase "turn on," turn on the LED
    if "turn on" in command:
        print("Turning ON the light")
        led.on()  # Turn on the LED
    # If the command contains the phrase "turn off," turn off the LED
    elif "turn off" in command:
        print("Turning OFF the light")
        led.off()  # Turn off the LED
    else:
        # If the command doesn't match recognized phrases, provide feedback
        print("Command not recognized")

# Main loop to continuously listen for and execute commands
while True:
    command = listen_for_command()  # Get the voice command
    control_light(command)          # Control the light based on the command
    sleep(2)                        # Small delay between each command to prevent rapid looping
